{"version":3,"sources":["images/brba-main-screen.jpg","images/bcs-main-screen.jpg","components/ui/Footer.js","components/screens/MainScreen.js","helpers/getData.js","hooks/useFetchData.js","components/CharacterContext.js","components/characters/CharacterModal.js","components/ui/SearchBar.js","hooks/useForm.js","components/ui/Loading.js","components/characters/CharacterCard.js","components/ui/NotFound.js","components/characters/CharacterGrid.js","components/ui/FatalError.js","components/ui/SwitchPage.js","images/brba-screen-full.png","images/brba-screen-mobile.png","components/screens/BrBaScreen.js","images/bcs-screen-full.png","images/bcs-screen-mobile.png","components/screens/BCSScreen.js","components/routes/AppRouter.js","BreakingBadDB.js","index.js"],"names":["Footer","React","memo","className","href","target","rel","icon","faGithub","faCode","faDatabase","id","MainScreen","initialState","useState","currentColor","setCurrentColor","changeBackground","alt","resetBackground","to","src","brbaImg","onMouseEnter","onMouseLeave","bcsImg","getData","searchParam","a","baseURL","endPoint","encodeURI","axios","get","response","data","state","ok","loading","useFetchData","isBCS","dataState","setDataState","paramState","setParamState","useEffect","result","info","filter","char","better_call_saul_appearance","length","appearance","fetchData","setSearch","value","CharacterContext","createContext","CharacterModal","useContext","context","setContext","isOpen","character","imgSrc","name","birthday","occupation","status","nickname","portrayed","closeModal","overlayClassName","onRequestClose","faTimesCircle","onClick","map","occ","SearchBar","isBcs","handleSearch","values","setValues","useForm","search","searchValue","handleInputChange","reset","clearState","setClearState","tempSearchValue","setTempSearchValue","onSubmit","evt","preventDefault","type","placeholder","onChange","faTimes","faSearch","faRedoAlt","Loading","color","height","width","CharacterCard","category","textClass","trim","NotFound","faFrown","CharacterGrid","img","char_id","FatalError","SwitchPage","faArrowAltCircleRight","BrBaScreen","brbaFullSizeImg","brbaMobileSizeImg","BCSScreen","bcsFullSizeImg","bcsMobileSizeImg","AppRouter","exact","path","component","BreakingBadDB","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7dc3e06.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brba-main-screen.f73270f2.jpg\";","export default __webpack_public_path__ + \"static/media/bcs-main-screen.c768a4ac.jpg\";","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faCode, faDatabase } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const Footer = React.memo(() => {\r\n  return (\r\n    <div className='app-footer'>\r\n      <div className='icons-container'>\r\n        <a\r\n          href='https://github.com/cloudluis22'\r\n          target='_blank'\r\n          rel='noreferrer'>\r\n          <FontAwesomeIcon icon={faGithub} className='link-icon' />\r\n        </a>\r\n        <a\r\n          href='https://github.com/cloudluis22/br-bad-universe-react-app'\r\n          target='_blank'\r\n          rel='noreferrer'>\r\n          <FontAwesomeIcon icon={faCode} className='link-icon' />\r\n        </a>\r\n        <a href='https://breakingbadapi.com/' target='_blank' rel='noreferrer'>\r\n          <FontAwesomeIcon icon={faDatabase} className='link-icon' />\r\n        </a>\r\n      </div>\r\n      <div id='about-info'>\r\n        This web application was made using React JS and The Breaking Bad API.\r\n      </div>\r\n      <div id='copyright-info'>© powered by cloudluis22</div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport brbaImg from '../../images/brba-main-screen.jpg';\r\nimport bcsImg from '../../images/bcs-main-screen.jpg';\r\nimport { Footer } from '../ui/Footer';\r\n\r\nexport const MainScreen = () => {\r\n  const initialState = 'background-light-green';\r\n  const [currentColor, setCurrentColor] = useState(initialState);\r\n\r\n  const changeBackground = ({ target }) => {\r\n    switch (target.alt) {\r\n      case 'Breaking Bad':\r\n        setCurrentColor('background-brba-green');\r\n        break;\r\n\r\n      case 'Better Call Saul':\r\n        setCurrentColor('background-bcs-red');\r\n        break;\r\n\r\n      default:\r\n        setCurrentColor(initialState);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const resetBackground = () => {\r\n    setCurrentColor('background-light-green');\r\n  };\r\n\r\n  return (\r\n    <div className={currentColor}>\r\n      <header>\r\n        <h1 className='title animate__animated animate__fadeInUp'>\r\n          The Breaking Bad Universe\r\n        </h1>\r\n        <h2\r\n          className='subtitle animate__animated animate__fadeInUp'\r\n          id='main-subtitle'>\r\n          Choose a show.\r\n        </h2>\r\n      </header>\r\n\r\n      <main className='main-container'>\r\n        <div>\r\n          <Link to='/brba'>\r\n            <img\r\n              src={brbaImg}\r\n              alt='Breaking Bad'\r\n              className='main-img animate__animated animate__fadeIn'\r\n              onMouseEnter={changeBackground}\r\n              onMouseLeave={resetBackground}\r\n            />\r\n          </Link>\r\n        </div>\r\n\r\n        <div>\r\n          <Link to='/bcs'>\r\n            <img\r\n              src={bcsImg}\r\n              alt='Better Call Saul'\r\n              className='main-img animate__animated animate__fadeIn'\r\n              onMouseEnter={changeBackground}\r\n              onMouseLeave={resetBackground}\r\n            />\r\n          </Link>\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const getData = async (searchParam) => {\r\n  const baseURL = 'https://www.breakingbadapi.com/api';\r\n  let endPoint = '';\r\n\r\n  /*\r\n      Trae a todos los personajes que cumplan con el parámetro de búsqueda.\r\n      ---------------------------------------------------------------------\r\n      Brings all the characters that meet the search parameter.\r\n    */\r\n  if (searchParam) {\r\n    endPoint = `${baseURL}/characters?name=${encodeURI(searchParam)}`;\r\n  } else {\r\n    /*\r\n        Si no hay parámetro trae a todos.\r\n        -----------------------------------------------\r\n        If there is no parameter it gets all characters.\r\n      */\r\n    endPoint = `${baseURL}/characters`;\r\n  }\r\n\r\n  const response = await axios.get(endPoint);\r\n  const { data } = response;\r\n  return data;\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getData } from '../helpers/getData';\r\n\r\nconst state = {\r\n  ok: false,\r\n  loading: true,\r\n  data: [],\r\n};\r\n\r\nexport const useFetchData = (isBCS) => {\r\n  const [dataState, setDataState] = useState(state);\r\n  const [paramState, setParamState] = useState('');\r\n\r\n  const setSearch = (value) => {\r\n    setParamState(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let result = [];\r\n    const fetchData = async () => {\r\n      try {\r\n        const info = await getData(paramState);\r\n\r\n        if (!isBCS) {\r\n          result = info.filter((char) => char.appearance.length > 0);\r\n        } else {\r\n          result = info.filter(\r\n            (char) => char.better_call_saul_appearance.length > 0\r\n          );\r\n        }\r\n\r\n        setDataState({\r\n          ok: true,\r\n          loading: false,\r\n          data: result,\r\n          searchParam: paramState,\r\n        });\r\n      } catch (error) {\r\n        setDataState({\r\n          ok: false,\r\n          loading: false,\r\n          data: [],\r\n        });\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [isBCS, paramState]);\r\n\r\n  return {\r\n    dataState,\r\n    setSearch,\r\n  };\r\n};\r\n","import { createContext } from 'react';\r\n\r\nexport const CharacterContext = createContext(null);\r\n","import React, { useContext, useEffect } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { CharacterContext } from '../CharacterContext';\r\n\r\nexport const CharacterModal = () => {\r\n  const { context, setContext } = useContext(CharacterContext);\r\n\r\n  const { isOpen, character } = context;\r\n\r\n  const {\r\n    imgSrc,\r\n    name,\r\n    birthday,\r\n    occupation,\r\n    status,\r\n    nickname,\r\n    appearance,\r\n    portrayed,\r\n  } = character;\r\n\r\n  const closeModal = () => {\r\n    setContext({\r\n      isOpen: false,\r\n      character: {\r\n        occupation: [],\r\n        appearance: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        className='modal'\r\n        overlayClassName='modal-overlay'\r\n        onRequestClose={closeModal}>\r\n        <h1 className='modal-name'> {name} </h1>\r\n\r\n        <FontAwesomeIcon\r\n          icon={faTimesCircle}\r\n          className='modal-close'\r\n          onClick={closeModal}\r\n        />\r\n\r\n        <div className='modal-character-container'>\r\n          <div className='modal-image-container'>\r\n            <img src={imgSrc} className='modal-image' alt={name} />\r\n          </div>\r\n\r\n          <div className='modal-attributes-container'>\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Portrayed by: </h2>\r\n              <p className='character-attribute-value'> {portrayed} </p>\r\n            </div>\r\n\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Birthday: </h2>\r\n              <p className='character-attribute-value'> {birthday} </p>\r\n            </div>\r\n\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Nickname: </h2>\r\n              <p className='character-attribute-value'> {nickname} </p>\r\n            </div>\r\n\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Occupation: </h2>\r\n              {occupation.map((occ) => {\r\n                return <p className='character-attribute-value'> {occ} </p>;\r\n              })}\r\n            </div>\r\n\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Status: </h2>\r\n              <p className='character-attribute-value'> {status} </p>\r\n            </div>\r\n\r\n            <div className='character-attribute-container'>\r\n              <h2 className='character-attribute-title'> Appearance: </h2>\r\n              <p className='character-attribute-value'>\r\n                {`Since season ${appearance[0]}`}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faSearch,\r\n  faTimes,\r\n  faRedoAlt,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const SearchBar = ({ isBcs, handleSearch }) => {\r\n  const [searchValue, handleInputChange, reset] = useForm({\r\n    search: '',\r\n  });\r\n\r\n  const { search } = searchValue;\r\n\r\n  const [clearState, setClearState] = useState(false);\r\n\r\n  const [tempSearchValue, setTempSearchValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (search.length > 0) {\r\n      setClearState(true);\r\n    } else {\r\n      setClearState(false);\r\n    }\r\n  }, [search]);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    if (search.length < 1) {\r\n      return;\r\n    }\r\n\r\n    setTempSearchValue(search);\r\n    handleSearch(search);\r\n    reset();\r\n  };\r\n\r\n  const handleResetSearch = () => {\r\n    handleSearch('');\r\n    setTempSearchValue('');\r\n  };\r\n\r\n  return (\r\n    <form className='searchbar-wrapper' onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        placeholder='Search characters'\r\n        name='search'\r\n        value={search}\r\n        onChange={handleInputChange}\r\n        className='searchbar'\r\n      />\r\n      {clearState && (\r\n        <FontAwesomeIcon\r\n          icon={faTimes}\r\n          className='clear-icon'\r\n          onClick={reset}\r\n        />\r\n      )}\r\n\r\n      <button\r\n        type='submit'\r\n        className={\r\n          /*\r\n            Por defecto se coloca el diseño de Breaking Bad a menos de que se especifique.\r\n            -----------------------------------------------------------------------------------\r\n            By default it uses the Breaking Bad design unless specified.\r\n          */\r\n          isBcs\r\n            ? 'search-btn search-color-yellow'\r\n            : 'search-btn search-color-green'\r\n        }>\r\n        <FontAwesomeIcon icon={faSearch} />\r\n      </button>\r\n      {!!tempSearchValue && (\r\n        <span className='reset-search-icon' onClick={handleResetSearch}>\r\n          <FontAwesomeIcon icon={faRedoAlt} className='searchbar-container' />\r\n        </span>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  handleSearch: PropTypes.func.isRequired,\r\n};\r\n","import { useState } from 'react';\r\n\r\n// Hook custom para manejar valores de formularios.\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const Loading = ({ isBCS }) => {\r\n  let color = '';\r\n\r\n  if (!isBCS) {\r\n    color = '#369457';\r\n  } else {\r\n    color = '#FFFF00';\r\n  }\r\n\r\n  return (\r\n    <div className='fetch-message-container'>\r\n      <Loader type='Oval' color={color} height={200} width={200} />\r\n      <p> Fetching data! This shouldn't take too long. </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { CharacterContext } from '../CharacterContext';\r\n\r\nexport const CharacterCard = ({\r\n  imgSrc,\r\n  name,\r\n  birthday,\r\n  occupation,\r\n  status,\r\n  nickname,\r\n  appearance,\r\n  portrayed,\r\n  category,\r\n}) => {\r\n  let textClass = '';\r\n\r\n  if (name.trim().length > 18) {\r\n    textClass = 'character-name small-font';\r\n  } else {\r\n    textClass = 'character-name';\r\n  }\r\n\r\n  const { setContext } = useContext(CharacterContext);\r\n\r\n  const openCharacterModal = () => {\r\n    setContext({\r\n      isOpen: true,\r\n      character: {\r\n        imgSrc,\r\n        name,\r\n        birthday,\r\n        occupation,\r\n        status,\r\n        nickname,\r\n        appearance,\r\n        portrayed,\r\n        category,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='character-card' onClick={openCharacterModal}>\r\n      <img src={imgSrc} alt={name} className='character-img' />\r\n      <span className={textClass}> {name} </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharacterCard.propTypes = {\r\n  imgSrc: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const NotFound = () => {\r\n  return (\r\n    <div className='fetch-message-container'>\r\n      <FontAwesomeIcon icon={faFrown} className='fetch-message-icon' />\r\n      <p>\r\n        Character not found! Make another search or reset to load all characters\r\n        again.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CharacterCard } from './CharacterCard';\r\nimport { NotFound } from '../ui/NotFound';\r\n\r\nexport const CharacterGrid = React.memo(({ data }) => {\r\n  if (data.length > 0) {\r\n    return (\r\n      <div className='character-grid'>\r\n        {data.map((char) => {\r\n          return (\r\n            <CharacterCard\r\n              imgSrc={char.img}\r\n              name={char.name}\r\n              birthday={char.birthday}\r\n              occupation={char.occupation}\r\n              status={char.status}\r\n              nickname={char.nickname}\r\n              appearance={char.appearance}\r\n              portrayed={char.portrayed}\r\n              category={char.category}\r\n              key={char.char_id}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <NotFound />;\r\n  }\r\n});\r\n\r\nCharacterGrid.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const FatalError = ({ isBcs }) => {\r\n  return (\r\n    <div className='fetch-message-container'>\r\n      <FontAwesomeIcon\r\n        icon={faTimesCircle}\r\n        className={`fetch-message-icon ${\r\n          !isBcs ? 'icon-green' : 'icon-yellow'\r\n        }`}\r\n      />\r\n      <p>\r\n        Failed connecting to the database! Please check your internet connection\r\n        and try again.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const SwitchPage = ({ isBcs }) => {\r\n  return (\r\n    <Link to={`${!isBcs ? '/bcs' : '/brba'}`}>\r\n      <FontAwesomeIcon\r\n        icon={faArrowAltCircleRight}\r\n        className='arrow-switch-page'\r\n      />\r\n    </Link>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/brba-screen-full.66a6f919.png\";","export default __webpack_public_path__ + \"static/media/brba-screen-mobile.af3ffbee.png\";","import React from 'react';\r\n\r\nimport { useFetchData } from '../../hooks/useFetchData';\r\nimport { CharacterModal } from '../characters/CharacterModal';\r\nimport { SearchBar } from '../ui/SearchBar';\r\nimport { Loading } from '../ui/Loading';\r\nimport { CharacterGrid } from '../characters/CharacterGrid';\r\nimport { Footer } from '../ui/Footer';\r\nimport { FatalError } from '../ui/FatalError';\r\nimport { SwitchPage } from '../ui/SwitchPage';\r\n\r\nimport brbaFullSizeImg from '../../images/brba-screen-full.png';\r\nimport brbaMobileSizeImg from '../../images/brba-screen-mobile.png';\r\n\r\nexport const BrBaScreen = () => {\r\n  const handleSearch = (value = '') => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const { dataState, setSearch } = useFetchData(false);\r\n  const { data, loading, ok } = dataState;\r\n\r\n  return (\r\n    <div className='background-brba-green'>\r\n      <SwitchPage />\r\n      <img\r\n        src={brbaFullSizeImg}\r\n        alt='Breaking Bad Full Logo'\r\n        className='brba-logo-full'\r\n      />\r\n      <img\r\n        src={brbaMobileSizeImg}\r\n        alt='Breaking Bad Mobile Logo'\r\n        className='brba-logo-mobile'\r\n      />\r\n      <SearchBar handleSearch={handleSearch} />\r\n      {loading ? (\r\n        <Loading />\r\n      ) : ok ? (\r\n        <CharacterGrid data={data} />\r\n      ) : (\r\n        <FatalError />\r\n      )}\r\n      <Footer />\r\n      <CharacterModal />\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bcs-screen-full.f80d03d4.png\";","export default __webpack_public_path__ + \"static/media/bcs-screen-mobile.9bbd6a22.png\";","import React from 'react';\r\n\r\nimport { useFetchData } from '../../hooks/useFetchData';\r\nimport { CharacterModal } from '../characters/CharacterModal';\r\nimport { SearchBar } from '../ui/SearchBar';\r\nimport { Loading } from '../ui/Loading';\r\nimport { CharacterGrid } from '../characters/CharacterGrid';\r\nimport { Footer } from '../ui/Footer';\r\nimport { FatalError } from '../ui/FatalError';\r\nimport { SwitchPage } from '../ui/SwitchPage';\r\n\r\nimport bcsFullSizeImg from '../../images/bcs-screen-full.png';\r\nimport bcsMobileSizeImg from '../../images/bcs-screen-mobile.png';\r\n\r\nexport const BCSScreen = () => {\r\n  const handleSearch = (value = '') => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const { dataState, setSearch } = useFetchData(true);\r\n  const { data, loading, ok } = dataState;\r\n\r\n  return (\r\n    <div className='background-bcs-red'>\r\n      <SwitchPage isBcs />\r\n      <img\r\n        src={bcsFullSizeImg}\r\n        alt='Better Call Saul Full Logo'\r\n        className='bcs-logo-full'\r\n      />\r\n      <img\r\n        src={bcsMobileSizeImg}\r\n        alt='Better Call Saul Mobile Logo'\r\n        className='bcs-logo-mobile'\r\n      />\r\n      <SearchBar isBcs={true} handleSearch={handleSearch} />\r\n      {loading ? (\r\n        <Loading isBCS={true} />\r\n      ) : ok ? (\r\n        <CharacterGrid data={data} />\r\n      ) : (\r\n        <FatalError isBcs={true} />\r\n      )}\r\n      <Footer />\r\n      <CharacterModal />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport { MainScreen } from '../screens/MainScreen';\r\nimport { BrBaScreen } from '../screens/BrBaScreen';\r\nimport { BCSScreen } from '../screens/BCSScreen';\r\n\r\nexport const AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/' component={MainScreen} />\r\n        <Route exact path='/brba' component={BrBaScreen} />\r\n        <Route exact path='/bcs' component={BCSScreen} />\r\n\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AppRouter } from './components/routes/AppRouter';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport { CharacterContext } from './components/CharacterContext';\r\n\r\nimport './styles/styles.scss';\r\nimport 'animate.css';\r\n\r\nexport const BreakingBadDB = () => {\r\n  const defaultContext = {\r\n    isOpen: false,\r\n    character: {\r\n      /*\r\n        Los valores \"occupation\" y \"appearance\" se declaran como arreglos\r\n        vacíos desde el inicio porqué al inicializarse la app se utilizan\r\n        inmediatamente algunos métodos de arreglos incluso si están vacíos.\r\n        ------------------------------------------------------------------\r\n        The values \"occupation\" and \"appearance\" are declared as arrays\r\n        from the beginning because when initializing the app, some array\r\n        methods are instantly used even if they are empty.\r\n      */\r\n      occupation: [],\r\n      appearance: [],\r\n    },\r\n  };\r\n\r\n  const [context, setContext] = useState(defaultContext);\r\n\r\n  return (\r\n    <div>\r\n      <CharacterContext.Provider value={{ context, setContext }}>\r\n        <AppRouter />\r\n      </CharacterContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { BreakingBadDB } from './BreakingBadDB';\r\n\r\nReactDOM.render(\r\n  <BreakingBadDB />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}